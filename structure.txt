minorg.py
- [[must be updated if sub-command added or removed]]
- import all sub-command mains
- split args into 'sub_cmd' and 'sub_cmd_args'
- pass 'sub_cmd_args' into the appropriate sub-command main function determined by 'sub_cmd'
- if invalid 'sub_cmd' or help, print generic help (by executing help function imported from generic_help.py)
- try...except...finally or 'with TemporaryDirectory() as temp_dir' to remove temporary files + directories

generic_help.py
- [[must be updated if sub-command added or removed]]
- import all sub_command_help.py (hard coded?)
  - extract argument structure summary
- print description of sub-commands & summarises sub-command argument structure, then exit

common_help.py
- contains information for common arguments shared by multiple sub-commands
  - e.g. -r|--ref and --bed?

sub_command_main.py
- sub-commands
  - full (calls all other sub-commands in some order)
  - target (discovers homologues in non-reference genome)
  - grna (generates all possible gRNA)
  - filter (filters gRNA; sub-sub-commands: cds, background, gc, flank)
  - minimumset (generates mutually exclusive gRNA sets)
- import relevant sub-command classes & functions
- parse 'sub_cmd_args' passed by minorg.py
- execute sub-command main function calling sub functions
- if invalid args, print sub-command help
  - if arg does not exist, print and inform user
  - if arg's value is wrongly formatted (or wrong type), print and inform user
  - if '-h|--help', pass relevant string formatted for MAN page into 'man -l -'
    - all data must be in Python so we can compile it & execute portably

sub_command.py
- define relevant classes & functions

sub_command_help.py
- contains information for sub-command-specific arguments
- to be combined with 
