Tutorial (Python)
=================

Please download the files in https://github.com/rlrq/MINORg/tree/master/examples. In all the examples below, you should replace "/path/to" with the appropriate full path name, which is usually to the directory containing these example files.

Setting up the tutorial
~~~~~~~~~~~~~~~~~~~~~~~

To ensure that the examples in this tutorial work, please replace '/path/to' in the files 'arabidopsis_genomes.txt', 'athaliana_genomes.txt', and 'subset_genome_mapping.txt' with the full path to the directory containing the example files.


Getting started
~~~~~~~~~~~~~~~

To begin, import the :class:`~minorg.MINORg.MINORg` class.

>>> from minorg.MINORg import MINORg

To create a MINORg object:

>>> my_minorg = MINORg(directory = "/path/to/output/directory", prefix = "prefix")

Both ``directory`` and ``prefix`` are optional. If not provided, they will default to the current directory and 'minorg' respectively. If the directory does not currently exist, it will be created.

If you wish to use the default values specified in a config file, use this instead:

>>> my_minorg = MINORg(config = "/path/to/config.ini", directory = "/path/to/output/directory", prefix = "prefix")

You may now set your parameters using the attributes of your :class:`~minorg.MINORg.MINORg` object. For a table listing the equivalent CLI arguments and :class:`~minorg.MINORg.MINORg` attributes, see :ref:`Parameters:CLI vs Python`. For example, you can specify executables as such:

>>> my_minorg.blastn = '/path/to/blastn/executable'
>>> my_minorg.rpsblast = '/path/to/rpsblast/executable'
>>> my_minorg.mafft = '/path/to/mafft/executable'

Defining target sequences
~~~~~~~~~~~~~~~~~~~~~~~~~

User-provided targets
+++++++++++++++++++++

Let us begin with the simplest MINORg execution:

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_00py_target")
>>> my_minorg.target = "/path/to/sample_CDS.fasta"
>>> my_minorg.full()

The above combination of arguments tells MINORg to generate gRNA from targets in a user-provided FASTA file (``my_minorg.target = 'pat/to/sample_CDS.fasta'``) and to output files into the directory ``/path/to/output/directory/example_00py_target``. By default, MINORg generates 20 bp gRNA using NGG PAM. The full MINORg programme is executed by calling the :meth:`~minorg.MINORg.MINORg.full` method (``my_minorg.full()``).

Reference gene(s) as targets
++++++++++++++++++++++++++++

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_01py_refgene")
>>> my_minorg.add_reference("/path/to/subset_ref_TAIR10.fasta", "/path/to/subset_ref_TAIR10.gff", alias = "TAIR10")
>>> my_minorg.genes = ["AT5G45050", "AT5G45060", "AT5G45200", "AT5G45210", "AT5G45220", "AT5G45230", "AT5G45240", "AT5G45250"]
>>> my_minorg.query_reference = True
>>> my_minorg.full()

In the above example, ``my_minorg.add_reference("/path/to/subset_ref_TAIR10.fasta", "/path/to/subset_ref_TAIR10.gff", alias = "TAIR10")`` is used to specify information about a reference genome:

* Positional argument 1: path to reference assembly (In this case ``"/path/to/subset_ref_TAIR10.fasta"``)
* Positional argument 2: path to reference annotation (In this case ``"/path/to/subset_ref_TAIR10.gff"``)
* Optional keyword argument 1 (``alias``): genome alias (in this case ``"TAIR10"``); a unique name for the reference genome, used when referring to it in sequence names and output files. Autogenerated by MINORg if not provided.
* See :meth:`~minorg.MINORg.MINORg.add_reference` and :ref:`Tutorial_py:Non-standard reference` for how to specify genetic code and non-standard attribute field names

``my_minorg.genes = ["AT5G45050", "AT5G45060", "AT5G45200", "AT5G45210", "AT5G45220", "AT5G45230", "AT5G45240", "AT5G45250"]`` tells MINORg the target gene(s), and ``my_minorg.query_reference = True`` tells MINORg to generate gRNA for reference gene(s).

Non-reference gene(s) as targets
++++++++++++++++++++++++++++++++

Extending the reference
^^^^^^^^^^^^^^^^^^^^^^^

See also: :ref:`Parameters:Extended genome`

If you have both genomic and CDS-only sequences of your target genes but not a GFF3 annotation file, MINORg can infer coding regions (CDS) for your target genes using :meth:`~mionrg.MIONRg.MINORg.extend_reference`. See :ref:`Parameters:Extended genome` for how to name your sequences to ensure proper mapping of CDS to genes.

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_02py_ext")
>>> my_minorg.extend_reference("/path/to/sample_gene.fasta", "/path/to/sample_CDS.fasta")
>>> my_minorg.genes = ["AT1G10920"]
>>> my_minorg.query_reference = True
>>> my_minorg.full()

:meth:`~minorg.MINORg.MINORg.extend_reference` effectively adds new genes to the reference genome, so they can be used just like any reference gene. Therefore, they can also be used in combination with :attr:`~minorg.MINORg.MINORg.query`.

Inferring homologues in unannotated genomes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

See also: :ref:`Algorithms:Non-reference homologue inference`, :ref:`Parameters:Multi-argument (CLI)`

If you would like MINORg to infer homologues genes in non-reference genomes, you can use :meth:`~minorg.MINORg.MINORg.add_query` to specify the FASTA files of those non-reference genomes.

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_03py_query")
>>> my_minorg.extend_reference("/path/to/sample_gene.fasta", "/path/to/sample_CDS.fasta")
>>> my_minorg.genes = ["AT1G10920"]
>>> my_minorg.add_query("/path/to/subset_9654.fasta", alias = "9654")
>>> my_minorg.add_query("/path/to/subset_9655.fasta", alias = "9655")
>>> my_minorg.full()

In the above example, ``my_minorg.add_query("/path/to/subset_9654.fasta", alias = "9654")`` and ``my_minorg.add_query("/path/to/subset_9655.fasta", alias = "9655")`` are used to specify information about query FASTA files.

* The alias keyword argument is optional. If not provided, MINORg will generate a unique alias.
* Query FASTA files are stored as a dictionary with the format {<alias>:<FASTA>} at :attr:`~minorg.MINORg.MINORg.query`.
* If you'd like to remove a query file that you've added, you can use:
  
  >>> my_minorg.remove_query("9654")
  
  * The :meth:`~minorg.MINORg.MINORg.remove_query` method takes a query alias. If you did not specify an alias when using :meth:`~minorg.MINORg.MINORg.add_query` and do not know the alias of the file you wish to remove, you may view the query-FASTA mapping using the :attr:`~minorg.MINORg.MINORg.query` attribute.
    
    >>> my_minorg.query
    {"9654": "/path/to/subset_9654.fasta", "9655": "/path/to/subset_9655.fasta"}


Domain as targets
+++++++++++++++++

MINORg allows users to specify the identifier of an RPS-BLAST position-specific scoring matrix (PSSM-Id) to further restrict the target sequence to a given domain associated with the PSSM-Id. This could be particularly useful when designing gRNA for genes that do not share conserved domain structures but do share a domain that you wish to knock out.

Local database
^^^^^^^^^^^^^^

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_04py_domain")
>>> my_minorg.add_reference("/path/to/subset_ref_TAIR10.fasta", "/path/to/subset_ref_TAIR10.gff", alias = "TAIR10")
>>> my_minorg.genes = ["AT5G45050"]
>>> my_minorg.query_reference = True
>>> my_minorg.rpsblast = "/path/to/rpsblast/executable"
>>> my_minorg.db = "/path/to/rpsblast/db"
>>> my_minorg.pssm_ids = ["214815"]
>>> my_minorg.full()

In the above example, gRNA will be generated for the WRKY domain (PSSM-Id 214815 as of CDD database v3.18) of the gene AT5G45050. Users are responsible for providing the PSSM-Id of a domain that exists in the gene. If multiple PSSM-Ids are provided, overlapping domains will be combined and output WILL NOT distinguish between one PSSM-Id or another. Unlike other examples, the database (:attr:`~minorg.MINORg.MINORg.db`) is not provided as part of the example files. You will have to download it yourself. See :ref:`Parameters:RPS-BLAST local database` for more information.

Remote database
^^^^^^^^^^^^^^^

While it is in theory possible to use the remote CDD database & servers instead of local ones, the ``--remote`` option for the 'rpsblast'/'rpsblast+' command from the BLAST+ package has never worked for me. In any case, if your version of local rpsblast is able to access the remote database, you can use :attr:`~minorg.MINORg.MINORg.remote_rps` instead of :attr:`~minorg.MINORg.MINORg.db`.

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_04py_domain")
>>> my_minorg.add_reference("/path/to/subset_ref_TAIR10.fasta", "/path/to/subset_ref_TAIR10.gff", alias = "TAIR10")
>>> my_minorg.genes = ["AT5G45050"]
>>> my_minorg.query_reference = True
>>> my_minorg.rpsblast = "/path/to/rpsblast/executable"
>>> my_minorg.remote_rps = True
>>> my_minorg.pssm_ids = ["214815"]
>>> my_minorg.full()

Defining gRNA
~~~~~~~~~~~~~

See also: :ref:`Parameters:PAM`

By default, MINORg generates 20 bp gRNA using SpCas9's NGG PAM. You may specify other gRNA length using :attr:`~minorg.MINORg.MINORg.length` and other PAM using :attr:`~minorg.MINORg.MINORg.pam`.

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_05py_grna")
>>> my_minorg.add_reference("/path/to/subset_ref_TAIR10.fasta", "/path/to/subset_ref_TAIR10.gff", alias = "TAIR10")
>>> my_minorg.genes = ["AT5G45050"]
>>> my_minorg.query_reference = True
>>> my_minorg.length = 19
>>> my_minorg.pam = "Cas12a"
>>> my_minorg.full()

In the example above, MINORg will generate 19 bp gRNA (``my_minorg.length = 19``) using Cas12a's unusual 5' PAM pattern (TTTV<gRNA>) (``my_minorg.pam = "Cas12a"``). MINORg has several built-in PAMs (see :ref:`Parameters:Preset PAM patterns` for options), and also supports customisable PAM patterns using ambiguous bases and regular expressions (see :ref:`Parameters:PAM` for format).

Filtering gRNA
~~~~~~~~~~~~~~

MINORg supports 3 different gRNA filtering options, all of which can be used together.

Filter by GC content
++++++++++++++++++++

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_06py_gc")
>>> my_minorg.add_reference("/path/to/subset_ref_TAIR10.fasta", "/path/to/subset_ref_TAIR10.gff", alias = "TAIR10")
>>> my_minorg.genes = ["AT5G45050"]
>>> my_minorg.query_reference = True
>>> my_minorg.gc_min = 0.2
>>> my_minorg.gc_max = 0.8
>>> my_minorg.full()

In the above example, MINORg will exclude gRNA with less than 20% (``my_minorg.gc_min = 0.2``) or greater than 80% (``my_minorg.gc_min = 0.8``) GC content. By default, minimum GC content is 30% and maximum is 70%.

Filter by off-target
++++++++++++++++++++
See: :ref:`Algorithms:Off-target assessment`

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_07py_ot_ref")
>>> my_minorg.add_reference("/path/to/subset_ref_TAIR10.fasta", "/path/to/subset_ref_TAIR10.gff", alias = "TAIR10")
>>> my_minorg.genes = ["AT5G45050"]
>>> my_minorg.query_reference = True
>>> my_minorg.screen_reference = True
>>> my_minorg.add_background("/path/to/subset_ref_Araly2.fasta", alias = "araly")
>>> my_minorg.add_background("/path/to/subset_ref_Araha1.fasta", alias = "araha")
>>> my_minorg.add_background("/path/to/subset_9654.fasta", alias = "9654")
>>> my_minorg.add_background("/path/to/subset_9655.fasta", alias = "9655")
>>> my_minorg.ot_gap = 2
>>> my_minorg.ot_mismatch = 2
>>> my_minorg.full()

In the above example, MINORg will screen gRNA for off-targets in:

* The reference genome (``my_minorg.screen_reference``)
* Four different FASTA files (``my_minorg.add_background("<FASTA>", alias = "<alias>")``)
  
  * The alias keyword argument is optional. If not provided, MINORg will generate a unique alias.
  * Note that any AT5G45050 homologues in these four FASTA files will NOT be masked. This means that only gRNA that do not target any AT5G45050 homologues in these four genomes will pass this off-target check.
    * To mask homologues in these genomes, you will need to provide a FASTA file containing the sequences of their homologues using ``my_minorg.mask = ["/path/to/to_mask_1.fasta", "/path/to/to_mask_2.fasta"]``. You may use subcommand :meth:`~minorg.MINORg.MINORg.seq` (see :ref:`Tutorial_py:Subcommand :meth:\`~minorg.MINORg.MINORg.seq\``) to identify these homologues.

:attr:`~minorg.MINORg.MINORg.ot_gap` and :attr:`~minorg.MINORg.MINORg.ot_mismatch` control the minimum number of gaps or mismatches off-target gRNA hits must have to be considered non-problematic; any gRNA with at least one problematic gRNA hit will be excluded. See :ref:`Algorithms:Off-target assessment` for more on the off-target assessment algorithm.

In the case above, ``my_minorg.screen_reference = True`` is actually redundant as the genome from which targets are obtained (which, because of ``my_minorg.query_reference``, is the reference genome) are automatically included for background check. However, in the example below, when the targets are from **non-reference genomes**, the reference genome is not automatically included for off-target assessment and thus :attr:`~minorg.MINORg.MINORg.screen_reference` is NOT redundant. Additionally, do note that the genes specified using :attr:`~minorg.MINORg.MINORg.gene` are masked in the reference genome, such that any gRNA hits to them are NOT considered off-target and will NOT be excluded.

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_08py_ot_nonref")
>>> my_minorg.add_reference("/path/to/subset_ref_TAIR10.fasta", "/path/to/subset_ref_TAIR10.gff", alias = "TAIR10")
>>> my_minorg.genes = ["AT5G45050"]
>>> my_minorg.add_query("/path/to/subset_9654.fasta", alias = "9654")
>>> my_minorg.screen_reference = True
>>> my_minorg.add_background("/path/to/subset_ref_Araly2.fasta", alias = "araly")
>>> my_minorg.add_background("/path/to/subset_ref_Araha1.fasta", alias = "araha")
>>> my_minorg.add_background("/path/to/subset_9655.fasta", alias = "9655")
>>> my_minorg.ot_gap = 2
>>> my_minorg.ot_mismatch = 2
>>> my_minorg.full()

PAM-less off-target check
^^^^^^^^^^^^^^^^^^^^^^^^^

By default, MINORg checks for the presence of PAM sites next to potential off-target hits. If there are no PAM sites, MINORg considers that hit non-problematic. You may override this behaviour by setting :attr:`~minorg.MINORg.MINORg.ot_pamless` to ``True``. This tells MINORg to mark off-target hits that meet the :attr:`~minorg.MINORg.MINORg.ot_gap` or :attr:`~minorg.MINORg.MINORg.ot_mismatch` thresholds as problematic regardless of the presence or absence of PAM sites nearby.

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_09py_ot_pamless")
>>> my_minorg.add_reference("/path/to/subset_ref_TAIR10.fasta", "/path/to/subset_ref_TAIR10.gff", alias = "TAIR10")
>>> my_minorg.genes = ["AT5G45050"]
>>> my_minorg.add_query("/path/to/subset_9654.fasta", alias = "9654")
>>> my_minorg.screen_reference = True
>>> my_minorg.add_background("/path/to/subset_ref_Araly2.fasta", alias = "araly")
>>> my_minorg.add_background("/path/to/subset_ref_Araha1.fasta", alias = "araha")
>>> my_minorg.add_background("/path/to/subset_9655.fasta", alias = "9655")
>>> my_minorg.ot_gap = 2
>>> my_minorg.ot_mismatch = 2
>>> my_minorg.ot_pamless = True
>>> my_minorg.full()

Skip off-target check
^^^^^^^^^^^^^^^^^^^^^

To skip off-target check entirely, use ``background_check = False`` when calling :meth:`~minorg.MINORg.MINORg.full`.

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_10py_skipbgcheck")
>>> my_minorg.add_reference("/path/to/subset_ref_TAIR10.fasta", "/path/to/subset_ref_TAIR10.gff", alias = "TAIR10")
>>> my_minorg.genes = ["AT5G45050"]
>>> my_minorg.query_reference = True
>>> my_minorg.full(background_check = False)

Filter by feature
+++++++++++++++++
See: :ref:`Algorithms:Within-feature inference`

By default, when :attr:`~minorg.MINORg.MINORg.genes` is set, MINORg restricts gRNA to coding regions (CDS). For more on how MINORg does this for inferred, unannotated homologues, see :ref:`Algorithms:Within-feature inference`. You may change the feature type in which to design gRNA using the attribute :attr:`~minorg.MINORg.MINORg.feature`. See column 3 of your GFF3 file for valid feature types (see https://en.wikipedia.org/wiki/General_feature_format for more on GFF file format).

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_11py_withinfeature")
>>> my_minorg.add_reference("/path/to/subset_ref_TAIR10.fasta", "/path/to/subset_ref_TAIR10.gff", alias = "TAIR10")
>>> my_minorg.genes = ["AT5G45050"]
>>> my_minorg.query_reference = True
>>> my_minorg.feature = "three_prime_UTR"
>>> my_minorg.full(background_check = False)

Subcommands
~~~~~~~~~~~

MINORg comprises of four main steps:

#. Target sequence identification
#. Candidate gRNA generation
#. gRNA filtering
#. Minimum gRNA set generation

As users may only wish to execute a subset of these steps instead of the full programme (:meth:`~minorg.MINORg.MINORg.full`), MINORg also provides four subcommands (methods) corresponding to these four steps:

#. :meth:`~minorg.MINORg.MINORg.seq`
#. :meth:`~minorg.MINORg.MINORg.grna`
#. :meth:`~minorg.MINORg.MINORg.filter`, which itself calls three other methods

   * :meth:`~minorg.MINORg.MINORg.filter_background`
   * :meth:`~minorg.MINORg.MINORg.filter_feature`
   * :meth:`~minorg.MINORg.MINORg.filter_gc`
   
#. :meth:`~minorg.MINORg.MINORg.minimumset`

The subcommands may be useful if you already have a preferred off-target/on-target assessment software. In this case, you may execute subcommands :meth:`~minorg.MINORg.MINORg.seq` and :meth:`~minorg.MINORg.MINORg.grna`, submit the gRNA output by MINORg for off-target/on-target assessment, update the .map file output by MINORg with the status of each gRNA for that off-target/on-target assessment, and execute :meth:`~minorg.MINORg.MINORg.minimumset` to obtain a desired number of minimum gRNA sets. Note that if you do this, you should re-read the updated .map file into MINORg using :meth:`~minorg.MINORg.MINORg.parse_grna_map_from_file` so MINORg can replace the gRNA data stored in memory with your updated gRNA data.

Subcommand :meth:`~minorg.MINORg.MINORg.seq`
++++++++++++++++++++++++++++++++++++++++++++

TODO


Non-standard reference
++++++++++++++++++++++

Non-standard genetic code
^^^^^^^^^^^^^^^^^^^^^^^^^

When using :attr:`~minorg.MINORg.MINORg.pssm_ids`, users should ensure that the correct genetic code has been specified for reference genomes using the ``genetic_code`` keyword argument when adding reference genomes using :meth:`~minorg.MINORg.MINORg.add_reference`, as MINORg has to first translate CDS into peptides for domain search using RPS-BLAST. The default genetic code is the Standard Code. Please refer to https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi for genetic code numbers and names.


>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_XXpy_geneticcode")
>>> my_minorg.add_reference("/path/to/subset_ref_yeast_mt.fasta", "/path/to/subset_ref_yeast_mt.gff", alias = "yeast_mt", genetic_code = 3) ## specify genetic code here
>>> my_minorg.genes = ["gene-Q0275"]
>>> my_minorg.query_reference = True
>>> my_minorg.pssm_ids = ["366140"]
>>> my_minorg.full()

In the above example, the gene 'gene-Q0275' is a yeast mitochondrial gene, and ``my_minorg.pssm_ids = ["366140"]`` specifies the PSSM-Id for the COX3 domain in the Cdd v3.18 RPS-BLAST database. The genetic code number for yeast mitochondrial code is '3'.

As a failsafe, MINORg does not terminate translated peptide sequences at the first stop codon. This ensures that any codons after an incorrectly translated premature stop codon will still be translated. Typically, a handful of mistranslated codons can still result in the correct RPS-BLAST domain hits, although hit scores may be slightly lower. Nevertheless, to ensure maximum accuracy, the correct genetic code is preferred.


Non-standard GFF3 attribute field names
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

See also: :ref:`Parameters:Attribute modification`

MINORg requires standard attribute field names in GFF3 files in order to properly map subfeatures to their parent features (e.g. map CDS to mRNA, and mRNA to gene). Non-standard field names should be mapped to standard ones using the ``attr_mod`` (for 'attribute modification') keyword argument when adding reference genomes using :meth:`~minorg.MINORg.MINORg.add_reference`.

>>> from minorg.MINORg import MINORg
>>> my_minorg = MINORg(directory = "/path/to/example_XXpy_attrmod")
>>> my_minorg.add_reference("/path/to/subset_ref_irgsp.fasta", "/path/to/subset_ref_irgsp.gff", alias = "irgsp", attr_mod = {"mRNA": {"Parent": "Locus_id"}}) ## specify attribute modifications
>>> my_minorg.genes = ["Os01t0100100"]
>>> my_minorg.query_reference = True
>>> my_minorg.full()

The IRGSP 1.0 reference genome for rice (*Oryza sativa* subsp. Nipponbare) uses a non-standard attribute field name for mRNA entries in their GFF3 file. Instead of 'Parent', which is the standard name of the field used to map a feature to its parent feature, mRNA entries in the IRGSP 1.0 annotation use 'Locus_id'. See :ref:`Parameters:Attribute modification` for more details on how to format the input to ``attr_mod``.

Multithreading
~~~~~~~~~~~~~~

MINORg supports multi-threading in order to process files in parallel. Any excess threads may also be used for BLAST. This is most useful when you are querying multiple genomes (whether using ``--query`` or ``--indv``), have multiple reference genomes (``--reference``), or multiple background sequences (``--background``).

To run MINORg with parallel processing, use ``--thread <number of threads>``.

.. code-block:: bash

   $ minorg --directory ./example_31_thread \
            --query ./subset_9654.fasta --query ./subset_9655.fasta \
            --gene AT1G10920 \
            --extend-gene ./sample_gene.fasta --extend-cds ./sample_CDS.fasta \
            --thread 2

Differences between CLI and Python versions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Note that, unlike the command line, the Python package does not support aliases even if the config file has been set up appropriately for command line executions. Therefore, there are no true equivalents to ``--cluster``, ``--indv``, or ``--reference``.

To specify cluster genes (analogous to ``--cluster`` and ``--gene``):

>>> my_minorg.cluster = 'RPS6' ## incorrect; this attribute does not exist; does not throw error now but will cause problems later
>>> my_minorg.genes = ['AT5G46260','AT5G46270','AT5G46450','AT5G46470','AT5G46490','AT5G46510','AT5G46520'] ## correct

To specify query FASTA files (analogous to ``--indv`` and ``--query``):

>>> my_minorg.indv = '9654,9655' ## incorrect; this attribute does not exist; does not throw error now but will cause problems later
>>> my_minorg.query = {'9654': '/path/to/subset_9654.fasta', '9655': '/path/to/subset_9655.fasta'} ## correct

To specify reference genomes (analogous to ``--reference``, ``--assembly``, ``--annotation``, ``--attr-mod``, and ``--genetic-code``; note that ``attr_mod`` and ``genetic_code`` are optional if the annotation uses standard attribute field names and the standard genetic code, which the example below does):

>>> my_minorg.reference = 'TAIR10' ## incorrect
AttributeError: can't set attribute
>>> my_minorg.add_reference('TAIR10', '/path/to/TAIR10.fasta', '/path/to/TARI10.gff3', genetic_code = 1, atr_mod = {}) ## correct


